<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sipariş Takip Paneli</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <!-- Chosen Palette: Warm Neutrals -->
    <!-- Application Structure Plan: The application is designed as a single-page dashboard with a fluid, layered structure. The main view presents a polished, visually appealing dashboard with key metrics (KPIs), a dynamic data table, and interactive charts. The core interaction flow is a drill-down model: clicking on any interactive element (table row, chart segment) opens a single, multi-purpose modal that provides granular details. A critical improvement is the integration of an AI-generated summary, which now loads automatically on page entry, giving the user instant high-level insights. This structure prioritizes both an aesthetic "feel" and a clear, logical exploration path, allowing users to effortlessly switch between a macro overview and micro-level details without feeling overwhelmed. -->
    <!-- Visualization & Content Choices: 
        - KPI Cards: (Goal: Inform) Used to present key metrics including status-based counts. Method: Stylish HTML/Tailwind cards with hover effects. Interaction: Now also clickable to show related orders in a modal, creating a consistent user flow. Justification: Provides immediate, high-level, and now interactive insights into operational status.
        - Orders Table: (Goal: Organize/Inform) A detailed, scrollable table with 'Durum' and more readable 'Sipariş Tarihi' columns. Method: HTML Table with dynamic content. Interaction: Rows are clickable to show individual order details in a modal. Justification: Remains the core source for detailed transaction data.
        - Doughnut Chart (Revenue by Product): (Goal: Compare) To show revenue contribution by product. Method: Chart.js Canvas. Interaction: Clicking a segment filters data and shows a list of orders for that product in a modal. Justification: Excellent for visualizing part-to-whole relationships and provides an interactive entry point for product-specific analysis.
        - Bar Chart (Orders by Month): (Goal: Change/Compare) To show order volume over time. Method: Chart.js Canvas. Interaction: Clicking a bar filters the data and shows a list of orders for that month in a modal. Justification: Ideal for comparing quantities across time periods and identifying trends.
        - Gemini Summary Section: (Goal: Analyze) A dedicated section for the AI-generated summary. Method: A dynamic text block updated via a Fetch API call. Interaction: Automated on page load. Justification: This transforms the app from a simple dashboard to an AI-powered business intelligence tool by providing instant, high-level analysis, making it more valuable and engaging.
    -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f0f2;
        }
        .container-main {
            background-color: #f8f7f4;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
            border-radius: 1.5rem;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            height: 300px;
            max-height: 400px;
        }
        @media (min-width: 768px) {
            .chart-container {
                height: 350px;
            }
        }
        .table-container {
            max-height: 600px;
            overflow-y: auto;
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0,0,0);
            background-color: rgba(0,0,0,0.4);
            backdrop-filter: blur(5px);
            -webkit-backdrop-filter: blur(5px);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 24px;
            border-radius: 1rem;
            width: 90%;
            max-width: 700px;
            box-shadow: 0 4px 12px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
            position: relative;
            animation: fadeIn 0.3s ease-out;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body class="text-gray-800">

    <div class="container mx-auto p-4 sm:p-6 lg:p-8">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-extrabold text-gray-900">Sipariş Takip Paneli</h1>
            <p class="text-lg text-gray-600 mt-2">Sipariş verilerinin genel durumu ve ürün performans analizleri.</p>
        </header>

        <main class="grid grid-cols-1 lg:grid-cols-3 gap-8 p-6 container-main">
            <div class="lg:col-span-2 space-y-8">
                <section id="kpi-section" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                </section>

                <div class="bg-white p-6 rounded-2xl shadow-sm">
                    <h2 class="text-xl font-semibold mb-1">Tüm Siparişler</h2>
                    <p class="text-sm text-gray-500 mb-4">Aşağıdaki tablo, verilen tüm siparişlerin detaylarını içermektedir. Satırlara tıklayarak siparişin detaylarını ve durumunu görüntüleyip değiştirebilirsiniz.</p>
                    <div class="table-container">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50 sticky top-0">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sipariş Tarihi</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ürün Adı</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Adet</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Toplam Tutar</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Durum</th>
                                </tr>
                            </thead>
                            <tbody id="orders-table-body" class="bg-white divide-y divide-gray-200">
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="lg:col-span-1 space-y-8">
                <div class="bg-white p-6 rounded-2xl shadow-sm">
                    <h2 class="text-xl font-semibold mb-1">Genel Durum Özeti</h2>
                    <p class="text-sm text-gray-500 mb-4">Gemini tarafından oluşturulan sipariş verilerinin kısa özeti.</p>
                    <button id="getSummaryButton" class="w-full bg-indigo-600 text-white font-semibold py-2 px-4 rounded-xl shadow-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105">Özet Oluştur</button>
                    <div id="summary-section" class="min-h-[100px] flex items-center justify-center p-4 rounded-lg bg-gray-50 mt-4">
                        <div id="summary-loader" class="text-center hidden">
                            <svg class="animate-spin h-6 w-6 text-indigo-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <p class="mt-2 text-sm text-gray-500">Analiz yapılıyor...</p>
                        </div>
                        <p id="summaryText" class="text-gray-700 leading-relaxed"></p>
                    </div>
                </div>
                <div class="bg-white p-6 rounded-2xl shadow-sm">
                    <h2 class="text-xl font-semibold mb-1">Ürüne Göre Tutar Dağılımı</h2>
                    <p class="text-sm text-gray-500 mb-4">Hangi ürünün toplam ciroya ne kadar katkı sağladığını gösterir. Detaylar için dilime tıklayınız.</p>
                    <div class="chart-container h-64 md:h-72">
                        <canvas id="revenueByProductChart"></canvas>
                    </div>
                </div>
                <div class="bg-white p-6 rounded-2xl shadow-sm">
                     <h2 class="text-xl font-semibold mb-1">Aylara Göre Sipariş Adetleri</h2>
                     <p class="text-sm text-gray-500 mb-4">Aylık sipariş yoğunluğunu ve trendleri gösterir. Detaylar için çubuğa tıklayınız.</p>
                    <div class="chart-container h-64 md:h-72">
                        <canvas id="ordersByMonthChart"></canvas>
                    </div>
                </div>
            </div>

        </main>
    </div>

    <!-- The Modal for Order Details -->
    <div id="detailsModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('detailsModal')">&times;</span>
            <h3 id="modalTitle" class="text-2xl font-bold mb-4"></h3>
            <div id="modalContent" class="space-y-4"></div>
        </div>
    </div>

    <script>
        const API_KEY = ""; // KENDİ GEMINI API ANAHTARINIZI BURAYA EKLEYİN.
        const API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=" + API_KEY;

        let rawData = [
            { id: 1, date: '2025-01-27', code: '203001', name: 'PREMIUM BULAŞIK SÜNGERİ', qty: 10000, price: 0.54, status: 'Stokta' },
            { id: 2, date: '2025-03-04', code: '203001', name: 'PREMIUM BULAŞIK SÜNGERİ', qty: 10000, price: 0.54, status: 'Stokta' },
            { id: 3, date: '2025-06-13', code: '203001', name: 'PREMIUM BULAŞIK SÜNGERİ', qty: 20000, price: 0.54, status: 'Yolda (Gemi)' },
            { id: 4, date: '2025-07-25', code: '203001', name: 'PREMIUM BULAŞIK SÜNGERİ', qty: 10000, price: 0.54, status: 'Yolda (Gemi)' },
            { id: 5, date: '2025-04-21', code: '203009', name: 'PREMIUM BANYO BEZİ', qty: 10000, price: 0.91, status: 'Yolda (Uçak)' },
            { id: 6, date: '2025-07-25', code: '202020', name: 'MAVİ BONE', qty: 5000, price: 2.44, status: 'Stokta' },
            { id: 7, date: '2025-08-28', code: '202001', name: 'BULAŞIK SÜNGERİ', qty: 20000, price: 0.58, status: 'Stokta' }
        ];

        const formatDate = (dateString) => {
            const date = new Date(dateString);
            const options = { day: 'numeric', month: 'long', year: 'numeric' };
            return date.toLocaleDateString('tr-TR', options);
        };
        const formatCurrency = (value) => new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'USD' }).format(value);
        const formatNumber = (value) => new Intl.NumberFormat('tr-TR').format(value);
        const statusMap = {
            'Yolda (Gemi)': 'text-blue-500 font-semibold',
            'Yolda (Uçak)': 'text-yellow-500 font-semibold',
            'Stokta': 'text-green-500 font-semibold'
        };

        const renderUI = () => {
            const totalRevenue = rawData.reduce((sum, item) => sum + item.qty * item.price, 0);
            const totalQuantity = rawData.reduce((sum, item) => sum + item.qty, 0);
            const totalOrders = rawData.length;
            const uniqueProducts = new Set(rawData.map(item => item.name)).size;
            const totalOnShip = rawData.filter(item => item.status === 'Yolda (Gemi)').length;
            const totalOnPlane = rawData.filter(item => item.status === 'Yolda (Uçak)').length;
            const totalInStock = rawData.filter(item => item.status === 'Stokta').length;

            const kpiData = [
                { label: 'Toplam Tutar', value: formatCurrency(totalRevenue), icon: '💰' },
                { label: 'Toplam Adet', value: formatNumber(totalQuantity), icon: '📦' },
                { label: 'Sipariş Sayısı', value: totalOrders, icon: '📄' },
                { label: 'Yolda (Gemi)', value: totalOnShip, icon: '🚢', filter: 'Yolda (Gemi)' },
                { label: 'Yolda (Uçak)', value: totalOnPlane, icon: '✈️', filter: 'Yolda (Uçak)' },
                { label: 'Stokta', value: totalInStock, icon: '🏠', filter: 'Stokta' },
            ];

            const kpiSection = document.getElementById('kpi-section');
            kpiSection.innerHTML = '';
            kpiData.forEach(kpi => {
                const card = document.createElement('div');
                card.className = `bg-white p-5 rounded-2xl shadow-md flex items-center transition duration-300 transform hover:scale-105 cursor-pointer`;
                card.innerHTML = `
                    <div class="text-3xl mr-4">${kpi.icon}</div>
                    <div>
                        <div class="text-sm text-gray-500">${kpi.label}</div>
                        <div class="text-2xl font-bold text-gray-900">${kpi.value}</div>
                    </div>
                `;
                if (kpi.filter) {
                    card.onclick = () => showDetails(`${kpi.label} Siparişleri`, rawData.filter(item => item.status === kpi.filter));
                }
                kpiSection.appendChild(card);
            });

            const tableBody = document.getElementById('orders-table-body');
            tableBody.innerHTML = '';
            rawData.forEach(order => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50 cursor-pointer transition duration-150';
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${formatDate(order.date)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${order.name}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${formatNumber(order.qty)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">${formatCurrency(order.qty * order.price)}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm ${statusMap[order.status]}">${order.status}</td>
                `;
                row.onclick = () => showDetails('Sipariş Detayı', order);
                tableBody.appendChild(row);
            });

            const productRevenue = rawData.reduce((acc, order) => {
                const total = order.qty * order.price;
                acc[order.name] = (acc[order.name] || 0) + total;
                return acc;
            }, {});

            const revenueByProductCtx = document.getElementById('revenueByProductChart').getContext('2d');
            if (window.revenueChart) window.revenueChart.destroy();
            window.revenueChart = new Chart(revenueByProductCtx, {
                type: 'doughnut',
                data: {
                    labels: Object.keys(productRevenue),
                    datasets: [{
                        label: 'Tutar',
                        data: Object.values(productRevenue),
                        backgroundColor: ['#4f46e5', '#10b981', '#f59e0b', '#3b82f6', '#ef4444'],
                        borderColor: '#ffffff',
                        borderWidth: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    onClick: (evt, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const productName = Object.keys(productRevenue)[index];
                            const filteredOrders = rawData.filter(order => order.name === productName);
                            showDetails(`${productName} Siparişleri`, filteredOrders);
                        }
                    },
                    plugins: {
                        legend: { position: 'bottom', labels: { padding: 20 } },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return `${context.label}: ${formatCurrency(context.raw)}`;
                                }
                            }
                        }
                    },
                    cutout: '60%'
                }
            });

            const monthlyOrders = rawData.reduce((acc, order) => {
                const month = new Date(order.date).toLocaleString('tr-TR', { month: 'long', year: 'numeric' });
                acc[month] = (acc[month] || 0) + order.qty;
                return acc;
            }, {});

            const sortedMonths = Object.keys(monthlyOrders).sort((a, b) => {
                const [monthA, yearA] = a.split(' ');
                const [monthB, yearB] = b.split(' ');
                const monthMap = { 'Ocak': 0, 'Şubat': 1, 'Mart': 2, 'Nisan': 3, 'Mayıs': 4, 'Haziran': 5, 'Temmuz': 6, 'Ağustos': 7, 'Eylül': 8, 'Ekim': 9, 'Kasım': 10, 'Aralık': 11 };
                return new Date(yearA, monthMap[monthA]) - new Date(yearB, monthMap[monthB]);
            });
            
            const sortedQuantities = sortedMonths.map(month => monthlyOrders[month]);

            const ordersByMonthCtx = document.getElementById('ordersByMonthChart').getContext('2d');
            if (window.ordersChart) window.ordersChart.destroy();
            window.ordersChart = new Chart(ordersByMonthCtx, {
                type: 'bar',
                data: {
                    labels: sortedMonths,
                    datasets: [{
                        label: 'Sipariş Adedi',
                        data: sortedQuantities,
                        backgroundColor: '#3b82f6',
                        borderRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    onClick: (evt, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const monthName = sortedMonths[index];
                            const filteredOrders = rawData.filter(order => new Date(order.date).toLocaleString('tr-TR', { month: 'long', year: 'numeric' }) === monthName);
                            showDetails(`${monthName} Siparişleri`, filteredOrders);
                        }
                    },
                    plugins: {
                        legend: { display: false }
                    },
                    scales: {
                        y: { 
                            beginAtZero: true,
                            grid: { drawBorder: false },
                        },
                        x: {
                            grid: { display: false }
                        }
                    }
                }
            });
        };

        const showDetails = (title, data) => {
            const modal = document.getElementById('detailsModal');
            const modalTitle = document.getElementById('modalTitle');
            const modalContent = document.getElementById('modalContent');
            
            modalTitle.textContent = title;
            modalContent.innerHTML = '';
            
            if (Array.isArray(data)) {
                const tableHtml = `
                    <div class="table-container max-h-[300px]">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50 sticky top-0">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sipariş Tarihi</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ürün Adı</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Adet</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Toplam Tutar</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Durum</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                ${data.map(item => `
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${formatDate(item.date)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${item.name}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-700">${formatNumber(item.qty)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900">${formatCurrency(item.qty * item.price)}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm ${statusMap[item.status]}">${item.status}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                `;
                modalContent.innerHTML = tableHtml;
            } else {
                const item = data;
                const detailHtml = `
                    <div class="bg-gray-50 p-6 rounded-lg">
                        <p class="text-sm text-gray-500">Sipariş Tarihi</p>
                        <p class="text-lg font-semibold">${formatDate(item.date)}</p>
                    </div>
                    <div class="bg-gray-50 p-6 rounded-lg">
                        <p class="text-sm text-gray-500">Ürün Adı</p>
                        <p class="text-lg font-semibold">${item.name}</p>
                    </div>
                    <div class="grid grid-cols-2 gap-4">
                        <div class="bg-gray-50 p-6 rounded-lg">
                            <p class="text-sm text-gray-500">Adet</p>
                            <p class="text-lg font-semibold">${formatNumber(item.qty)}</p>
                        </div>
                        <div class="bg-gray-50 p-6 rounded-lg">
                            <p class="text-sm text-gray-500">Birim Fiyat</p>
                            <p class="text-lg font-semibold">${formatCurrency(item.price)}</p>
                        </div>
                        <div class="bg-gray-50 p-6 rounded-lg col-span-2">
                            <p class="text-sm text-gray-500">Toplam Tutar</p>
                            <p class="text-lg font-semibold">${formatCurrency(item.qty * item.price)}</p>
                        </div>
                    </div>
                    <div class="mt-4">
                        <label for="status-select" class="block text-sm font-medium text-gray-700 mb-2">Sipariş Durumunu Değiştir</label>
                        <select id="status-select" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
                            <option value="Yolda (Gemi)" ${item.status === 'Yolda (Gemi)' ? 'selected' : ''}>Yolda (Gemi)</option>
                            <option value="Yolda (Uçak)" ${item.status === 'Yolda (Uçak)' ? 'selected' : ''}>Yolda (Uçak)</option>
                            <option value="Stokta" ${item.status === 'Stokta' ? 'selected' : ''}>Stokta</option>
                        </select>
                    </div>
                `;
                modalContent.innerHTML = detailHtml;

                const statusSelect = document.getElementById('status-select');
                statusSelect.addEventListener('change', (e) => {
                    const newStatus = e.target.value;
                    const orderToUpdate = rawData.find(o => o.id === item.id);
                    if (orderToUpdate) {
                        orderToUpdate.status = newStatus;
                        renderUI();
                    }
                });
            }
            modal.style.display = 'flex';
        };

        const closeModal = (modalId) => {
            document.getElementById(modalId).style.display = 'none';
        };

        const getSummary = async () => {
            const summaryLoader = document.getElementById('summary-loader');
            const summaryText = document.getElementById('summaryText');
            summaryLoader.classList.remove('hidden');
            summaryText.classList.add('hidden');

            const formattedData = rawData.map(order => 
                `Sipariş ID: ${order.id}, Tarih: ${order.date}, Ürün Adı: ${order.name}, Adet: ${order.qty}, Birim Fiyat: ${order.price}, Toplam Tutar: ${order.qty * order.price}, Durum: ${order.status}`
            ).join('\n');

            const prompt = `Aşağıdaki sipariş verilerini analiz et ve bir iş analisti gibi davranarak önemli bulguları ve anahtar metrikleri (toplam sipariş sayısı, toplam tutar, en çok satan ürün, durum dağılımı gibi) özetle. Yanıtını maddeler halinde ve profesyonel bir dille sun. Veriler:\n\n${formattedData}`;

            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
                systemInstruction: {
                    parts: [{ text: "Sen bir veri analisti ve uzman iş danışmanısın. Verilen veriyi en önemli bulgularıyla birlikte özetle." }]
                },
                tools: [{ "google_search": {} }]
            };
            
            let retryCount = 0;
            const maxRetries = 3;
            const baseDelay = 1000;

            const makeApiCall = async () => {
                try {
                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API hatası: ${response.status} - ${errorData.error.message}`);
                    }
                    
                    const result = await response.json();
                    const text = result?.candidates?.[0]?.content?.parts?.[0]?.text || "Özet oluşturulamadı.";
                    summaryText.innerText = text;
                    summaryLoader.classList.add('hidden');
                    summaryText.classList.remove('hidden');

                } catch (error) {
                    if (retryCount < maxRetries) {
                        const delay = baseDelay * Math.pow(2, retryCount);
                        retryCount++;
                        setTimeout(makeApiCall, delay);
                    } else {
                        summaryText.innerText = `Özet alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`;
                        summaryLoader.classList.add('hidden');
                        summaryText.classList.remove('hidden');
                    }
                }
            };
            makeApiCall();
        };

        document.addEventListener('DOMContentLoaded', () => {
            renderUI();
            const getSummaryButton = document.getElementById('getSummaryButton');
            getSummaryButton.addEventListener('click', getSummary);
        });
    </script>
</body>
</html>
